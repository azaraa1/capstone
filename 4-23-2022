#include <usbhid.h>
#include <usbhub.h>
#include <hiduniversal.h>
#include <hidboot.h>
#include <SPI.h>
#include <math.h> 

int STATE_INITIAL = 0;
int STATE_WAIT_FOR_SCAN = 1;
int STATE_READ_SCALE = 2;
int STATE_REPORT_RESULT = 3;
int barcode = 0;
int weight = 1.01;

//BARCODE SCANNER CODE BEGINS HERE

class MyParser : public HIDReportParser {
  public:
    MyParser();
    void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);
  protected:
    uint8_t KeyToAscii(bool upper, uint8_t mod, uint8_t key);
    virtual void OnKeyScanned(bool upper, uint8_t mod, uint8_t key);
    virtual void OnScanFinished();
};

MyParser::MyParser() {}

void MyParser::Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf) {
  // If error or empty, return
  if (buf[2] == 1 || buf[2] == 0) return;

  for (uint8_t i = 7; i >= 2; i--) {
    // If empty, skip
    if (buf[i] == 0) continue;

    // If enter signal emitted, scan finished
    if (buf[i] == UHS_HID_BOOT_KEY_ENTER) {
      OnScanFinished();
    }

    // If not, continue normally
    else {
      // If bit position not in 2, it's uppercase words
      OnKeyScanned(i > 2, buf, buf[i]);
    }

    return;
  }
}

uint8_t MyParser::KeyToAscii(bool upper, uint8_t mod, uint8_t key) {
  // Letters
  if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    if (upper) return (key - 4 + 'A');
    else return (key - 4 + 'a');
  }

  // Numbers
  else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
  }

  return 0;
}

void MyParser::OnKeyScanned(bool upper, uint8_t mod, uint8_t key) {
  uint8_t ascii = KeyToAscii(upper, mod, key);
  barcode = ascii;
  Serial.print(char(barcode));
}

//END BARCODE SCANNER CODE

USB          Usb;
USBHub       Hub(&Usb);
HIDUniversal Hid(&Usb);
MyParser     Parser;
short        state = 0;


// "state machine" transitions
void transitionToState(short nextState) {
  if(nextState == STATE_WAIT_FOR_SCAN) {
    Serial.println("Please scan specimen barcode.");
  } else if(nextState == STATE_READ_SCALE) {
    Serial.print('\n');
    Serial.println("Place specimen on the scale.");
  } else if(nextState == STATE_REPORT_RESULT) {
    Serial.print("Specimen ID# ");
    Serial.print(barcode);
    Serial.print(" weighs ");
    Serial.write(weight);
    Serial.println(".");
    transitionToState(STATE_WAIT_FOR_SCAN);
  }

  state = nextState;
}

void MyParser::OnScanFinished() {
  transitionToState(STATE_READ_SCALE);

}

void waitForScan() {
  Serial.flush();
  Serial.begin(115200);//barcode scanner
  Usb.Task();
  Serial.flush();
}

void readScale() {
      Serial1.begin(9600);
  if (Serial1.available()) {
      int weight = Serial1.read();
      transitionToState(STATE_REPORT_RESULT);
    }
  }

void setup() {
  Serial.flush();
  Serial.begin(115200);//barcode scanner

  Serial.println("Start");

  if (Usb.Init() == -1) {
    Serial.println("OSC did not start.");
  }

  delay( 200 );

  Hid.SetReportParser(0, &Parser);
  Serial.flush();
}

void loop() {
  // super simple hard-coded "state machine"
  if(state == STATE_INITIAL) {
    transitionToState(STATE_WAIT_FOR_SCAN);
  } else if(state == STATE_WAIT_FOR_SCAN) {
    waitForScan();
  } else if(state == STATE_READ_SCALE) {
    readScale();
  } else {
    transitionToState(STATE_INITIAL);
  }
}
